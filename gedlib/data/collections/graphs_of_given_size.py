#//////////////////////////////////////////////////////////////////////////#
#                                                                          #
#   Copyright (C) 2018 by David B. Blumenthal                              #
#                                                                          #
#   This file is part of GEDLIB.                                           #
#                                                                          #
#   GEDLIB is free software: you can redistribute it and/or modify it      #
#   under the terms of the GNU Lesser General Public License as published  #
#   by the Free Software Foundation, either version 3 of the License, or   #
#   (at your option) any later version.                                    #
#                                                                          #
#   GEDLIB is distributed in the hope that it will be useful,              #
#   but WITHOUT ANY WARRANTY; without even the implied warranty of         #
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the           #
#   GNU Lesser General Public License for more details.                    #
#                                                                          #
#   You should have received a copy of the GNU Lesser General Public       #
#   License along with GEDLIB. If not, see <http://www.gnu.org/licenses/>. #
#                                                                          #
#//////////////////////////////////////////////////////////////////////////#

##
# @file graphs_of_given_size.py
# @brief Python script that generates a collection of graphs with given number of nodes from directory containing GXL files.
#
# @details 
# Usage: 
# ```sh
# $ python graphs_of_given_size.py \<dataset\> \<collection\> \<dir\> \<min_size\> \<max_size\> [-h] [--help]
# ```
# 
# Arguments:
#
# <table>
# <tr><th colspan="2"> positional arguments
# <tr><td> <tt>\<dataset\></tt> <td> path to existing graph collection XML file from which the collection should be generated; must respect GraphCollection.dtd
# <tr><td> <tt>\<collection\></tt> <td> path to sample file to be generated by the script
# <tr><td> <tt>\<dir\></tt> <td> path to directory containing GXL files
# <tr><td> <tt>\<min_size\></tt> <td> minimal number of nodes of graphs in the collection
# <tr><td> <tt>\<max_size\></tt> <td> maximal number of nodes of graphs in the collection
# </table>
'''
Python script that generates a collection of graphs with given number of nodes from directory containing GXL files.
'''


import xml.etree.ElementTree as ET
import argparse
import os.path

def graph_size(dir, gxl_file):
    num_nodes = 0
    graph = ET.parse(os.path.join(dir, gxl_file)).getroot()
    for node in graph.findall("graph/node"):
        num_nodes = num_nodes + 1
    #print("graph ", gxl_file, " has size ", num_nodes)
    return num_nodes

# Parse the command line arguments.
parser = argparse.ArgumentParser(description="Creates collection of graphs with given number of nodes from directory containing GXL files.")
parser.add_argument("dataset", help="path to existing dataset file")
parser.add_argument("collection", help="path to sample file to be generated by the script")
parser.add_argument("dir", help="path to directory containing GXL files")
parser.add_argument("min_size", help="minimal number of nodes", type=int)
parser.add_argument("max_size", help="maximal number of nodes", type=int)
args = parser.parse_args()
if args.dataset == args.collection:
    raise Exception("dataset file equals collection file")
if not os.path.isdir(args.dir):
        raise Exception("Invalid argument \"" + dir + "\": not a directory. Usage: python graphs_of_given_size.py <dataset> <collection> <dir> <min-num-nodes> <max-num-nodes>")

# Parse the dataset file.
dataset = ET.parse(args.dataset).getroot()
graphs = [(graph.attrib["file"], graph.attrib["class"]) for graph in dataset]

# Select graphs with size between min_size and max_size.
file = open(args.collection, "w")
file.write("<?xml version=\"1.0\"?>")
file.write("\n<!DOCTYPE GraphCollection SYSTEM \"http://www.inf.unibz.it/~blumenthal/dtd/GraphCollection.dtd\">")
file.write("\n<GraphCollection>")
for file_class in graphs:
    size = graph_size(args.dir, file_class[0])
    if (size >= args.min_size) and (size <= args.max_size):
        file.write("\n\t<graph file=\"" + file_class[0] + "\" class=\"" + file_class[1] + "\"/>")
file.write("\n</GraphCollection>")
file.close()